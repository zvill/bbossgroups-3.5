<project name="build all project" default="default" basedir=".">
	<description>
		build all project build file
	</description>
	<tstamp prefix="start" />

	<tstamp>
		<format property="compile.timestamp" pattern="yyyy-MM-dd HH.mm.ss" />
	</tstamp>
	<typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpath="svnant.jar" />
	<typedef resource="net/sf/antcontrib/antlib.xml" classpath="ant-contrib-1.0b3.jar" />


	<target name="help">
		<echo>
			ant:构建所有任务
			ant complete:构建所有任务			
			ant build-persistent：构建poolman
			ant distrib-bboss-persistent-jars:分发poolman的jar包到相关工程
				${portallib},
				${casserverlib},
				${active-ext-lib},
				${bboss-ws-lib},
				${bboss-aop-lib},
				${cms_baseline-lib},
				${bboss-taglib-lib},
				${kettle-lib}
				
			ant build-bboss-taglib： 构建标签库,执行依赖构建
			ant build-bboss-taglib-only： 构建标签库,不执行依赖构建
			ant distrib-bboss-taglib-jars:分发标签库jar包[frameworkset.jar]
				${portallib}
				${casserverlib}
				${bboss-ws-lib}
				${bboss-aop-lib}
				${cms_baseline-lib}
			ant build-bboss-util:构建util工具包
			ant distrib-bboss-util-jars:分发工具包到以下目录[frameworkset-util.jar]
				${active-ext-lib},
				${bboss-ws-lib},
				${bboss-aop-lib},
				${bbossevent-lib},
				${cms_baseline-lib},
				${bboss-persistent-lib},
				${bboss-taglib-lib},
				${kettle-lib},
				${portallib},
				${casserverlib}
			ant build-bboss-aop :构建aop框架包，并且执行依赖构建
			ant build-bboss-aop-only :构建aop框架包，不执行依赖构建
			ant distrib-bboss-aop-jars :分发aop框架包到以下工程[bboss-aop.jar,bboss-camel.jar,bboss-mina.jar,bboss-jms.jar,bboss-ws.jar]
				${bbossevent-lib},
				${cms_baseline-lib},
				${bboss-ws-lib},
				${active-ext-lib},
				${kettle-lib}
			ant distrib-bboss-aop-rpc-conf:分发aop框架rpc服务调用配置文件到以下工程[manager-rpc-service.xml,manager-rpc-service.xml,manager-rpc-jms.xml,manager-rpc-service.xml]
				${cms_baseline_resources},
				${active-ext_resources},
				${bboss-ws_resources},
				${bbossevent_resources},
				${kettle_resources}
			ant build-bboss-event:构建事件框架，执行依赖构建	
			ant build-bboss-event-only:构建事件框架，不执行依赖构建
			ant distrib-bboss-event-jars:分发事件框架的jar包,bboss-event.jar
				${cms_baseline-lib},
				${kettle-lib}
			ant build-bboss-ws：构建webservice测试用例
			ant build-active-ext-withdepends：构建mq扩展接口工程，执行依赖构建
			ant build-active-ext-only：构建mq扩展接口工程，不执行依赖构建
			ant distrib-active-ext-jars：分发mq扩展接口jar包[activemq-ext-console.jar,parameters-handler.jar]
				${cms_baseline-lib},
				${kettle-lib}
			ant build-cms_baseline：执行系统管理构建任务，执行依赖构建
			ant build-cms_baseline_only：执行系统管理构建任务，不执行依赖构建
			ant distrib-mqconfigefiles：分发mq-service.xml文件		
				${active-ext_resources},
				${bboss-ws_resources},
				${kettle_resources}
			ant distrib-cms_baseline-jars：分发系统管理jar包，mq服务jar包到不同的工程[mqservice.jar,mq-transferservice.jar]
				${kettle-lib},
				${active-ext-lib}
			ant build-kettle：构建kettle工程
			ant svn-update-procedure：执行svn文件替换任务
		</echo>
	</target>
	<target name="default" depends="complete" description="default = build distribution package" />

	<!-- set global properties for this build -->
	<property file="build.properties" />
	<target name="complete" depends="build-persistent,build-bboss-taglib,build-bboss-util,build-bboss-aop,build-bboss-event,build-bboss-ws" description="copy depends liberarys">

	</target>
	<target name="build-persistent" description="build bboss persistent project">
		<echo>build bboss persistent project</echo>
		<ant dir="${bboss-persistent}" />

		<echo>update ${bboss-ws-lib}/frameworkset-pool.jar</echo>
		<echo>update ${bboss-aop-lib}/frameworkset-pool.jar</echo>

		<echo>update ${bboss-taglib-lib}/frameworkset-pool.jar</echo>

		<antcall target="distrib-bboss-persistent-jars">
		</antcall>
	</target>
	<target name="distrib-bboss-persistent-jars" description="distrib-bboss-persistent-jars">
		<for list="${bboss-ws-lib},${bboss-aop-lib},${bboss-taglib-lib},${bbossevent-lib},${bbossevent-client-lib},${bboss-client-lib}" param="destdir">
			<sequential>
				<echo>@{destdir}-------------------------------</echo>
				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bboss-persistent}/distrib" />
					<param name="filedir" value="@{destdir}" />
					<param name="files" value="frameworkset-pool.jar" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="build-bboss-taglib" depends="build-persistent,build-bboss-aop,build-bboss-util" description="build bboss taglib project">
		<echo>build bboss taglib project</echo>
		<antcall target="build-bboss-taglib-only">
		</antcall>
	</target>

	<target name="build-bboss-taglib-only" description="build bboss taglib project">
		<echo>build bboss taglib project</echo>
		<ant dir="${bboss-taglib}" />
		<!--
			common_old_tag<-cms_baseline [frameworkset.jar]
			common_old_tag<-bbossaop [frameworkset.jar]
			common_old_tag<-cas server [frameworkset.jar]
			common_old_tag<-portal [frameworkset.jar]
			common_old_tag<-bboss-ws [frameworkset.jar]
			-->
		<echo>update frameworkset.jar</echo>
		<antcall target="distrib-bboss-taglib-jars">
		</antcall>
	</target>

	<target name="distrib-bboss-taglib-jars" description="distrib-bboss-taglib-jars">
		<for list="${bboss-ws-lib},${bboss-aop-lib}" param="destdir">
			<sequential>
				<echo>@{destdir}-------------------------------</echo>
				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bboss-taglib}/distrib" />
					<param name="filedir" value="@{destdir}" />
					<param name="files" value="frameworkset.jar,ditchnet-tabs-taglib.jar" />
				</antcall>
			</sequential>
		</for>
	</target>

	<target name="build-bboss-util" description="build bboss util project">
		<echo>build bboss util project</echo>
		<ant dir="${bboss-util}" />
		<!--
		common_old_util<-active-ext [frameworkset-util.jar]
		common_old_util<-bboss-ws [frameworkset-util.jar]
		common_old_util<-bbossaop [frameworkset-util.jar]
		common_old_util<-bbossevent [frameworkset-util.jar]
		common_old_util<-cms_baseline [frameworkset-util.jar]
		
		common_old_util<-common_old_dbcp [frameworkset-util.jar]
		common_old_util<-common_old_tag [frameworkset-util.jar]
		common_old_util<-kettle [frameworkset-util.jar]
		common_old_util<-portal [frameworkset-util.jar]
		common_old_util<-cas server [frameworkset-util.jar]
		-->
		<echo>update frameworkset-util.jar</echo>
		<antcall target="distrib-bboss-util-jars">
		</antcall>
	</target>

	<target name="distrib-bboss-util-jars" description="distrib-bboss-util-jars">
		<for list="${bboss-ws-lib},${bboss-aop-lib},${bbossevent-lib},${bboss-persistent-lib},${bboss-taglib-lib}" param="destdir">
			<sequential>
				<echo>@{destdir}-------------------------------</echo>
				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bboss-util}/distrib" />
					<param name="filedir" value="@{destdir}" />
					<param name="files" value="frameworkset-util.jar" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="build-bboss-aop" depends="build-persistent,build-bboss-util" description="build bboss-aop project">
		<antcall target="build-bboss-aop-only">
		</antcall>
	</target>

	<target name="build-bboss-aop-only" description="build bboss-aop project">
		<echo>build bboss-aop project</echo>
		<ant dir="${bboss-aop}" />
		<!--
		bbossaop<-bbossevent [bboss-aop.jar,bboss-camel.jar,bboss-mina.jar,bboss-jms.jar,bboss-ws.jar]
bbossaop<-cms_baseline [bboss-aop.jar,bboss-camel.jar,bboss-mina.jar,bboss-jms.jar,bboss-ws.jar]
bbossaop<-bboss-ws [bboss-aop.jar,bboss-camel.jar,bboss-mina.jar,bboss-jms.jar,bboss-ws.jar]
bbossaop<-active-ext [bboss-aop.jar,bboss-camel.jar,bboss-mina.jar,bboss-jms.jar,bboss-ws.jar]
bbossaop<-common_old_tag [bboss-aop.jar]
bbossaop<-common_old_util [bboss-aop.jar]
bbossaop<-kettle [bboss-aop.jar,bboss-camel.jar,bboss-mina.jar,bboss-jms.jar,bboss-ws.jar]
bbossaop<-portal [bboss-aop.jar]
bbossaop<-cas server [bboss-aop.jar]
		-->
		<echo>update bboss aop jars</echo>
		<antcall target="distrib-bboss-aop-jars" />
		<antcall target="distrib-bboss-aop-rpc-conf" />

	</target>

	<target name="distrib-bboss-aop-jars" description="distrib-bboss-aop-jars">
		<for list="${bbossevent-lib},${bboss-ws-lib},${bbossevent-client-lib},${bboss-client-lib}" param="destdir">
			<sequential>
				<echo>@{destdir}-------------------------------</echo>
				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bboss-aop}/distrib" />
					<param name="filedir" value="@{destdir}" />
					<param name="files" value="bboss-aop.jar,bboss-camel.jar,bboss-mina.jar,bboss-jms.jar,bboss-ws.jar,jgroups.jar" />
				</antcall>
			</sequential>
		</for>

		<for list="${bbossevent-lib},${bbossevent-client-lib},${bboss-client-lib}," param="destdir">
			<sequential>
				<echo>@{destdir}-------------------------------</echo>
				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bboss-aop}/distrib/test" />
					<param name="filedir" value="@{destdir}" />
					<param name="files" value="bboss-aop-test.jar" />
				</antcall>
			</sequential>
		</for>

		<for list="${bboss-taglib-lib},${bboss-util-lib}" param="destdir">
			<sequential>
				<echo>@{destdir}-------------------------------</echo>
				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bboss-aop}/distrib" />
					<param name="filedir" value="@{destdir}" />
					<param name="files" value="bboss-aop.jar" />
				</antcall>
			</sequential>
		</for>
	</target>

	<target name="distrib-bboss-aop-rpc-conf" description="distrib-bboss-aop-rpc-conf">
		<!--
				
			-->
		<for list="${bboss-ws_resources},${bbossevent-client_resources},${bboss-client_resouces},${bbossevent_resources}" param="destdir">
			<sequential>
				<echo>@{destdir}-------------------------------</echo>
				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bboss-aop_resources}/org/frameworkset/spi" />
					<param name="filedir" value="@{destdir}/org/frameworkset/spi" />
					<param name="files" value="manager-rpc-service.xml,manager-rpc-mina.xml,manager-rpc-jms.xml,manager-rpc-webservices.xml" />
				</antcall>

				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bboss-aop_resources}/etc/META-INF" />
					<param name="filedir" value="@{destdir}/etc/META-INF" />
					<param name="files" value="replSync-service-aop-tcp.xml,replSync-service-aop.xml" />
				</antcall>
			</sequential>
		</for>

	</target>

	<target name="build-bboss-event" depends="build-bboss-aop,build-bboss-util" description="build bbossevent project">
		<echo>build bbossevent project</echo>

		<antcall target="build-bboss-event-only">
		</antcall>
	</target>

<target name="build-bboss-event-only" description="build bbossevent project">
		<echo>build bbossevent project</echo>
		<ant dir="${bbossevent}" />
		<antcall target="distrib-bboss-event-jars">
		</antcall>
		<antcall target="distrib-bboss-event-resource">
		</antcall>

	</target>

	<target name="distrib-bboss-event-jars" description="distrib-bboss-event-jars">
		<!--
					
				-->
		<for list="${bbossevent-client-lib}" param="destdir">
			<sequential>
				<echo>@{destdir}-------------------------------</echo>
				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bbossevent}/distrib" />
					<param name="filedir" value="@{destdir}" />
					<param name="files" value="bboss-event.jar" />
				</antcall>

			</sequential>
		</for>

	</target>

	<target name="distrib-bboss-event-resource" description="distrib-bboss-event-resource files">
		<!--
					
				-->
		<for list="${bbossevent-client_resources}" param="destdir">
			<sequential>
				<echo>@{destdir}-------------------------------</echo>
				<antcall target="svn-update-procedure">
					<param name="sourcedir" value="${bbossevent_resources}" />
					<param name="filedir" value="@{destdir}" />
					<param name="files" value="event-service-assemble.xml" />
				</antcall>

			</sequential>
		</for>

	</target>

	<target name="build-bboss-ws" depends="build-bboss-aop,build-persistent,build-bboss-event,build-bboss-util,build-bboss-taglib" description="build bboss-ws project">
		<echo>build bboss-ws project</echo>
		<ant dir="${bboss-ws}" />
	</target>






	<!--
		实现文件更新到svn功能
		接收三个参数:		
		filedir-要更新的文件所在目录
		sourcedir-要更新的文件所在目录
		files-要更新的文件
	-->
	<target name="svn-update-procedure" description="svn-update-procedure">
		<!--
							The value of propStatusProperty can be : 
							normal : no modifications
							conflicted
							modified 
							
							The value of TextStatusProperty can be : 

							non-svn 
							normal : no modifications 
							added 
							missing : item is missing (removed by non-svn command) 
							incomplete 
							deleted 
							replaced 
							modified 
							merged 
							conflicted 
							obstructed 
							ignored 
							external 
							unversioned 
				</echo>-->
		<if>
			<equals arg1="${update-svn}" arg2="true" />
			<then>
				<for list="${files}" param="file">
					<sequential>
						<svn username="${svnant.repository.user}" password="${svnant.repository.passwd}">
							<status path="${filedir}/@{file}" textStatusProperty="file-text-status" propStatusProperty="file-prop-status" lastChangedRevisionProperty="file-lastCommitRevision" revisionProperty="file-revision" lastCommitAuthorProperty="file-lastCommitAuthor" />
						</svn>
						<echo>file status before copy :${file-text-status}</echo>
						<if>
							<equals arg1="${file-text-status}" arg2="conflicted" />
							<then>
								<svn username="${svnant.repository.user}" password="${svnant.repository.passwd}">
									<revert file="${filedir}/@{file}" />
									<update>
										<fileset dir="${filedir}">
											<include name="@{file}" />
										</fileset>
									</update>
								</svn>
							</then>
							<elseif>
								<or>
									<equals arg1="${file-text-status}" arg2="normal" />
									<equals arg1="${file-text-status}" arg2="missing" />
									<equals arg1="${file-text-status}" arg2="deleted" />
								</or>
								<then>
									<svn username="${svnant.repository.user}" password="${svnant.repository.passwd}">
										<update>
											<fileset dir="${filedir}">
												<include name="@{file}" />
											</fileset>
										</update>
									</svn>
								</then>
							</elseif>
						</if>
					</sequential>
				</for>
			</then>
		</if>
		<echo>copy ${sourcedir} ${files} to ${filedir}</echo>
		<copy todir="${filedir}" overwrite="true">
			<fileset dir="${sourcedir}" includes="${files}" />
		</copy>
		<if>
			<equals arg1="${update-svn}" arg2="true" />
			<then>
				<for list="${files}" param="file">
					<sequential>
						<svn username="${svnant.repository.user}" password="${svnant.repository.passwd}">
							<status path="${filedir}/@{file}" textStatusProperty="file-text-status" propStatusProperty="file-prop-status" lastChangedRevisionProperty="file-lastCommitRevision" revisionProperty="file-revision" lastCommitAuthorProperty="file-lastCommitAuthor" />
						</svn>
						<echo>file status before commit :${file-text-status}</echo>
						<if>
							<or>
								<equals arg1="${file-text-status}" arg2="added" />
								<equals arg1="${file-text-status}" arg2="modified" />
							</or>
							<then>
								<svn username="${svnant.repository.user}" password="${svnant.repository.passwd}">
									<commit message="commit ${filedir}/ @{file} to svn">
										<fileset dir="${filedir}" includes="@{file}" />
									</commit>
								</svn>
							</then>
							<elseif>
								<equals arg1="${file-text-status}" arg2="unversioned" />
								<then>
									<svn username="${svnant.repository.user}" password="${svnant.repository.passwd}">
										<add>
											<fileset dir="${filedir}" includes="@{file}" />
										</add>
										<commit message="commit ${filedir}/ @{file} to svn">
											<fileset dir="${filedir}" includes="@{file}" />
										</commit>
									</svn>
								</then>
							</elseif>
						</if>
					</sequential>
				</for>
			</then>
		</if>
	</target>
</project>